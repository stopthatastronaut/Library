{
  "Id": "3b534e57-e8b0-4a06-aa2c-9e7eba1f4337",
  "Name": "Upload files by FTP",
  "Description": "Upload files to a remote server via File Transfer Protocol (FTP) using WinSCP.\n\nThis step template requires the [WinSCP .NET Assembly](http://winscp.net/eng/docs/library#downloading_and_installing_the_assembly) to be installed on the server running the deployment.",
  "ActionType": "Octopus.Script",
  "Version": 4,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "## --------------------------------------------------------------------------------------\r\n## Input\r\n## --------------------------------------------------------------------------------------\r\n$PathToWinScp = $OctopusParameters['PathToWinScp']\r\n$FtpHost = $OctopusParameters['FtpHost']\r\n$FtpUsername = $OctopusParameters['FtpUsername']\r\n$FtpPassword = $OctopusParameters['FtpPassword']\r\n$FtpRemoteDirectory = $OctopusParameters['FtpRemoteDirectory']\r\n$FtpPackageStepName = $OctopusParameters['FtpPackageStepName']\r\n$FtpDeleteUnrecognizedFiles = $OctopusParameters['FtpDeleteUnrecognizedFiles']\r\n\r\n## --------------------------------------------------------------------------------------\r\n## Helpers\r\n## --------------------------------------------------------------------------------------\r\n# Helper for validating input parameters\r\nfunction Validate-Parameter([string]$foo, [string[]]$validInput, $parameterName) {\r\n    if (! $parameterName -contains \"Password\") \r\n    { \r\n        Write-Host \"${parameterName}: $foo\" \r\n    }\r\n    if (! $foo) {\r\n        throw \"No value was set for $parameterName, and it cannot be empty\"\r\n    }\r\n}\r\n\r\n# A collection of functions that can be used by script steps to determine where packages installed\r\n# by previous steps are located on the filesystem.\r\nfunction Find-InstallLocations {\r\n    $result = @()\r\n    $OctopusParameters.Keys | foreach {\r\n        if ($_.EndsWith('].Output.Package.InstallationDirectoryPath')) {\r\n            $result += $OctopusParameters[$_]\r\n        }\r\n    }\r\n    return $result\r\n}\r\n \r\nfunction Find-InstallLocation($stepName) {\r\n    $result = $OctopusParameters.Keys | where {\r\n        $_.Equals(\"Octopus.Action[$stepName].Output.Package.InstallationDirectoryPath\",  [System.StringComparison]::OrdinalIgnoreCase)\r\n    } | select -first 1\r\n \r\n    if ($result) {\r\n        return $OctopusParameters[$result]\r\n    }\r\n \r\n    throw \"No install location found for step: $stepName\"\r\n}\r\n \r\nfunction Find-SingleInstallLocation {\r\n    $all = @(Find-InstallLocations)\r\n    if ($all.Length -eq 1) {\r\n        return $all[0]\r\n    }\r\n    if ($all.Length -eq 0) {\r\n        throw \"No package steps found\"\r\n    }\r\n    throw \"Multiple package steps have run; please specify a single step\"\r\n}\r\n \r\n# Session.FileTransferred event handler\r\nfunction FileTransferred\r\n{\r\n    param($e)\r\n \r\n    if ($e.Error -eq $Null)\r\n    {\r\n        Write-Host (\"Upload of {0} succeeded\" -f $e.FileName)\r\n    }\r\n    else\r\n    {\r\n        Write-Error (\"Upload of {0} failed: {1}\" -f $e.FileName, $e.Error)\r\n    }\r\n \r\n    if ($e.Chmod -ne $Null)\r\n    {\r\n        if ($e.Chmod.Error -eq $Null)\r\n        {\r\n            Write-Host \"##octopus[stdout-verbose]\"\r\n            Write-Host (\"Permisions of {0} set to {1}\" -f $e.Chmod.FileName, $e.Chmod.FilePermissions)\r\n            Write-Host \"##octopus[stdout-default]\"\r\n        }\r\n        else\r\n        {\r\n            Write-Error (\"Setting permissions of {0} failed: {1}\" -f $e.Chmod.FileName, $e.Chmod.Error)\r\n        }\r\n \r\n    }\r\n    else\r\n    {\r\n        Write-Host \"##octopus[stdout-verbose]\"\r\n        Write-Host (\"Permissions of {0} kept with their defaults\" -f $e.Destination)\r\n        Write-Host \"##octopus[stdout-default]\"\r\n    }\r\n \r\n    if ($e.Touch -ne $Null)\r\n    {\r\n        if ($e.Touch.Error -eq $Null)\r\n        {\r\n            Write-Host \"##octopus[stdout-verbose]\"\r\n            Write-Host (\"Timestamp of {0} set to {1}\" -f $e.Touch.FileName, $e.Touch.LastWriteTime)\r\n            Write-Host \"##octopus[stdout-default]\"\r\n        }\r\n        else\r\n        {\r\n            Write-Error (\"Setting timestamp of {0} failed: {1}\" -f $e.Touch.FileName, $e.Touch.Error)\r\n        }\r\n \r\n    }\r\n    else\r\n    {\r\n        # This should never happen during \"local to remote\" synchronization\r\n        Write-Host \"##octopus[stdout-verbose]\"\r\n        Write-Host (\"Timestamp of {0} kept with its default (current time)\" -f $e.Destination)\r\n        Write-Host \"##octopus[stdout-default]\"\r\n    }\r\n}\r\n\r\n## --------------------------------------------------------------------------------------\r\n## Configuration\r\n## --------------------------------------------------------------------------------------\r\nValidate-Parameter $PathToWinScp -parameterName \"Path to WinSCP .NET Assembly\"\r\nValidate-Parameter $FtpHost -parameterName \"Host\"\r\nValidate-Parameter $FtpUsername -parameterName \"Username\"\r\nValidate-Parameter $FtpPassword -parameterName \"Password\"\r\nValidate-Parameter $FtpRemoteDirectory -parameterName \"Remote directory\"\r\nValidate-Parameter $FtpPackageStepName -parameterName \"Package step name\"\r\nValidate-Parameter $FtpDeleteUnrecognizedFiles -parameterName \"Delete unrecognized files\"\r\n\r\n## --------------------------------------------------------------------------------------\r\n## Main script\r\n## --------------------------------------------------------------------------------------\r\n\r\n# Load WinSCP .NET assembly\r\n$fullPathToWinScp = \"$PathToWinScp\\WinSCPnet.dll\"\r\nif(-not (Test-Path $fullPathToWinScp))\r\n{\r\n    throw \"$PathToWinScp does not contain the WinSCP .NET Assembly\"\r\n}\r\nAdd-Type -Path $fullPathToWinScp\r\n\r\n$stepPath = \"\"\r\nif (-not [string]::IsNullOrEmpty($FtpPackageStepName)) {\r\n    Write-Host \"Finding path to package step: $FtpPackageStepName\"\r\n    $stepPath = Find-InstallLocation $FtpPackageStepName\r\n} else {\r\n    $stepPath = Find-SingleInstallLocation\r\n}\r\nWrite-Host \"Package was installed to: $stepPath\"\r\n\r\ntry\r\n{\r\n    $sessionOptions = New-Object WinSCP.SessionOptions\r\n    $sessionOptions.Protocol = [WinSCP.Protocol]::Ftp\r\n    $sessionOptions.HostName = $FtpHost\r\n    $sessionOptions.UserName = $FtpUsername\r\n    $sessionOptions.Password = $FtpPassword\r\n \r\n    $session = New-Object WinSCP.Session\r\n    try\r\n    {\r\n        # Will continuously report progress of synchronization\r\n        $session.add_FileTransferred( { FileTransferred($_) } )\r\n \r\n        # Connect\r\n        $session.Open($sessionOptions)\r\n \r\n        Write-Host \"Beginning synchronization between $stepPath and $FtpRemoteDirectory on $FtpHost\"\r\n        \r\n        if (-not $session.FileExists($FtpRemoteDirectory))\r\n        {\r\n            Write-Host \"Remote directory not found, creating $FtpRemoteDirectory\"\r\n            $session.CreateDirectory($FtpRemoteDirectory);\r\n        }\r\n        \r\n        # Synchronize files\r\n        $synchronizationResult = $session.SynchronizeDirectories(\r\n            [WinSCP.SynchronizationMode]::Remote, $stepPath, $FtpRemoteDirectory, $FtpDeleteUnrecognizedFiles)\r\n \r\n        # Throw on any error\r\n        $synchronizationResult.Check()\r\n    }\r\n    finally\r\n    {\r\n        # Disconnect, clean up\r\n        $session.Dispose()\r\n    }\r\n \r\n    exit 0\r\n}\r\ncatch [Exception]\r\n{\r\n    throw $_.Exception.Message\r\n}\r\n"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "PathToWinScp",
      "Label": "Path to WinScp",
      "HelpText": "The directory where you extracted the WinSCP .NET Assembly.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "FtpHost",
      "Label": "Host",
      "HelpText": "The address of your FTP server. Example: `ftp.yourhost.com`.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "FtpUsername",
      "Label": "Username",
      "HelpText": "If no username is specified, the well-known username `anonymous` will be used.",
      "DefaultValue": "anonymous",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "FtpPassword",
      "Label": "Password",
      "HelpText": "If no password is specified, the well-known password `guest` will be used.\n\nIf the password field is bound, the binding expression will be visible to other authorized users.",
      "DefaultValue": "guest",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "FtpRemoteDirectory",
      "Label": "Remote directory",
      "HelpText": "The directory on your FTP server in which you want files to be placed. Example: `/site/wwwroot`",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "FtpPackageStepName",
      "Label": "Package step name",
      "HelpText": "Name of the previously-deployed package step that contains the files that you want to deploy.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    },
    {
      "Name": "FtpDeleteUnrecognizedFiles",
      "Label": "Delete unrecognized files",
      "HelpText": "Files can exist on the FTP server that do not exist in the NuGet package. Examples may be binaries from a previous release, or uploaded images in a CMS. Use this option to choose how to treat these files.",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "LastModifiedOn": "2015-06-19T04:42:34.402+00:00",
  "LastModifiedBy": "alfhenrik",
  "$Meta": {
    "ExportedAt": "2015-06-19T04:42:34.402+00:00",
    "OctopusVersion": "3.0.0.1614",
    "Type": "ActionTemplate"
  },
  "Category": "winscp"
}
