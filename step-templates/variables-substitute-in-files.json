{
  "Id": "a3078bc0-0615-4220-84e8-bb1f271a90f9",
  "Name": "Variables - Substitute in Files",
  "Description": "Replaces variables in a file(s) with their values from OctopusParameters",
  "ActionType": "Octopus.Script",
  "Version": 10,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = \"Stop\"\n\nfunction Resolve-OctopusVariablesInTemplate{\n<#\n.SYNOPSIS\n\tResolves Octopus variables in files with their values from a OctopusParameters\n\n.DESCRIPTION\n\tLooks for files using Get-ChildItem and in each of the files replaces ${Variable} with the value from $OctopusParameters.\n\tFiles are written back using UTF-8.\n\tRequires PowerShell 3.0 or higher.\n\n.PARAMETER Path\n\tPassed to Get-ChildItem to find the files you want to process\n\n.PARAMETER Filter\n\tPassed to Get-ChildItem to find the files you want to process\n\n.PARAMETER Include\n\tPassed to Get-ChildItem to find the files you want to process\n\n.PARAMETER Exclude\n\tPassed to Get-ChildItem to find the files you want to process\n\t\n.PARAMETER Recurse\n\tPassed to Get-ChildItem to find the files you want to process\n\n#>\n\tParam(\n\t\t[string]$Path,\n\t\t[string]$Filter = \"*.config\",\n\t\t[string[]]$Include,\n\t\t[string[]]$Exclude,\n\t\t[switch]$Recurse\n\t)\n\t\n\tif (-not $OctopusParameters) { throw \"No OctopusParameters found\" }\n\t\n\tWrite-Output \"PowerShell version...\"\n\tWrite-Output $PSVersionTable\n\tWrite-Output \"Path = $Path\"\n\t\n\tWrite-Output \"Getting target files...\"\n\t$TargetFiles = Get-ChildItem -File -Path $Path -Filter $Filter -Include $Include -Exclude $Exclude -Recurse:$Recurse\n\tif ($TargetFiles.Count -eq 0) {\n\t\tWrite-Warning \"`tDid not find any files to process!\"\n\t} else {\n\t\tWrite-Output \"`tFound $($TargetFiles.Count) file(s)\"\n\t}\n\t\n    if (Test-Path ($OctopusParameters['Octopus.Tentacle.Agent.ProgramDirectoryPath'] + \"\\Octopus.Platform.dll\")) {\n\t\tWrite-Output \"Will use Octopus.Platform.dll (TentacleVersion $env:TentacleVersion)\"\n\t\tforeach($File in $TargetFiles){\n\t\t\tResolve-VariablesUsingOctopusPlatformDll ($File.FullName) ($File.FullName)\n\t\t}\n    } else {\n\t\tWrite-Output \"Will use Octostache.dll (TentacleVersion $env:TentacleVersion)\"\n\t\tforeach($File in $TargetFiles){\n\t\t\tResolve-VariablesUsingOctostashe $File.FullName\n\t\t}        \n    }\n}\n\n#Export-ModuleMember -Function Resolve-OctopusVariablesInTemplate\n\nfunction Resolve-VariablesUsingOctostashe{\n\tParam(\n\t\t[string]$TemplateFile\n\t)\n\t\n\tWrite-Output \"Looking for Octostache.dll...\"\n\t# Hack-around until $OctopusParameters['Octopus.Tentacle.Agent.ProgramDirectoryPath'] is fixed\n\t$CalamariPath = $OctopusParameters['env:TentacleHome'] + \"\\Calamari\"\n\t$LatestInstalledCalamari = (Get-ChildItem $CalamariPath | ? { $_.PSIsContainer } | % { [System.Version]$_.Name } | Sort -Descending)[0].ToString()\n\tWrite-Output \"Loading from $CalamariPath\\$LatestInstalledCalamari\\Octostache.dll\"\n\tAdd-Type -Path \"$CalamariPath\\$LatestInstalledCalamari\\Octostache.dll\"\n\t\n\tWrite-Output \"Loading template file $TemplateFile...\"\n\t$TemplateContent = Get-Content -Raw $TemplateFile\n\tWrite-Output \"`tRead $($TemplateContent.Length) bytes\"\n\t\n\t$Dictionary = New-Object -TypeName Octostache.VariableDictionary\n\t\n\t# Load the hastable into the dictionary\n\tWrite-Output \"Loading `$OctopusParameters...\"\n\tforeach ($Variable in $OctopusParameters.GetEnumerator()) {\n\t\tWrite-Verbose \"#{$($Variable.Key)} = $($Variable.Value)\"\n\t\t$Dictionary.Set($Variable.Key, $Variable.Value)\n\t}\n\t\n\tWrite-Output \"Resolving variables...\"\n\t$EvaluatedTemplate = $Dictionary.Evaluate($TemplateContent)\n\t\n\tWrite-Output \"Writing the resolved template to $($TemplateFile)\"\n\t$EvaluatedTemplate | Out-File $TemplateFile -Force\t-Encoding UTF8\n\tWrite-Output \"Done!\"\n}\n\n\n\nfunction Resolve-VariablesUsingOctopusPlatformDll{\n\tParam(\n\t\t[string]$templateFile,\n\t\t[string]$outputFile\n\t)\n\tAdd-Type -Path ($OctopusParameters['Octopus.Tentacle.Agent.ProgramDirectoryPath'] + \"\\Octopus.Platform.dll\")\n\t\n\tWrite-Output \"Loading template file $templateFile...\"\n     \n    $contents = [System.IO.File]::ReadAllText($templateFile)\n\t\n\t$template = $null\n    $parseErr = $null\n    \n    if (-not [Octopus.Platform.Variables.Templates.Parser.TemplateParser]::TryParseTemplate($contents, [ref] $template, [ref] $parseErr))\n    {\n        throw \"The file contents could not be parsed as a valid Octopus template: $parseErr\"\n    }\n    \n    Write-Output \"Binding variables...\"\n    \n    $binding = [Octopus.Platform.Variables.Templates.Binder.PropertyListBinder]::CreateFrom($OctopusParameters)\n    \n    $newContents = New-Object System.Text.StringBuilder\n    $writer = New-Object System.IO.StringWriter $newContents\n    \n    Write-Output \"Evaluating template...\"\n    \n    [Octopus.Platform.Variables.Templates.Evaluator.TemplateEvaluator]::Evaluate($template, $binding, $writer)\n    \n    $writer.Dispose()\n    \n    Write-Output \"Writing result to $outputFile...\"\n    \n    [System.IO.File]::WriteAllText($outputFile, $newContents.ToString())\n}\n\n#---- Auto generated bootstrap by OctopusStepGenerator\n$FunctionParameters = @{}\nif($OctopusParameters['Path'] -ne $null){$FunctionParameters.Add('Path', $OctopusParameters['Path'])}\nif($OctopusParameters['Filter'] -ne $null){$FunctionParameters.Add('Filter', $OctopusParameters['Filter'])}\nif($OctopusParameters['Include'] -ne $null){$FunctionParameters.Add('Include', $($OctopusParameters['Include'] -split \"`n\"))}\nif($OctopusParameters['Exclude'] -ne $null){$FunctionParameters.Add('Exclude', $($OctopusParameters['Exclude'] -split \"`n\"))}\nif($OctopusParameters['Recurse'] -ne $null){$FunctionParameters.Add('Recurse', [System.Convert]::ToBoolean($OctopusParameters['Recurse']))}\nResolve-OctopusVariablesInTemplate @FunctionParameters\n",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.NuGetFeedId": null,
    "Octopus.Action.Package.NuGetPackageId": null
  },
  "Parameters": [
    {
      "Name": "Path",
      "Label": "Path",
      "HelpText": "Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory (.).",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Filter",
      "Label": "Filter",
      "HelpText": "Specifies, as a string array, a filter for an item or items that are included in the operation. Wildcards are permitted.",
      "DefaultValue": "*.config",
      "DisplaySettings": {}
    },
    {
      "Name": "Include",
      "Label": "Include",
      "HelpText": "Specifies, as a string array, an item or items that are included in the operation. Enter a path element or pattern, such as *.txt. Wildcards are permitted. Leave this empty if you have specified a Filter.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Name": "Exclude",
      "Label": "Exclude",
      "HelpText": "Specifies, as a string array, an item or items that are excluded in the operation. Enter a path element or pattern, such as *.txt. Wildcards are permitted. Leave this empty if you have specified a Filter.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Name": "Recurse",
      "Label": "Recurse",
      "HelpText": "Search the specified locations and in all sub-directories of those locations.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "LastModifiedBy": "worknate",
  "$Meta": {
    "ExportedAt": "2018-01-11T03:26:49.829Z",
    "OctopusVersion": "3.3.15",
    "Type": "ActionTemplate"
  },
  "Category": "octopus"
}
